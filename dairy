Goal:
10 medium or easy everyday

before:
39 combination sum (sorted; Pass nums[i:]; Append line when sum == target)
40 combination sum ii (similar to combination sum ii; Pass nums[i+1]; Append when sum == target; if nums[i] == nums[i-1] continue)
46 permutation  (if not nums append; nums[:i] + nums[i+1:]
47 permutations ii  (similar to permutation; if nums[i] == nums[i-1] continue)
77 combinations (append res.size == n; Pass nums[i+1:])
78 subsets  (sorted; nums[i+1:])
90 subsets ii   (subsets; if nums[i] == nums[i-1] continue)
216 combination sum iii (similar to combination sum ii; Pass nums[i+1]; Append when sum == target; if nums[i] == nums[i-1] continue)

09.18
35 search insert position

09.20
34 search for a range (std bs)
74 search in a 2d matrix (standard template, v_mid = matrix[mid // n][mid % n]
162 find peak element (std bs)
240 search in a 2d matrix ii (not bs. Search from top right)
167 two sums ii sorted (non-std bs, start < end)
33 search in a rotated array
81 search in a rotated array ii (Remove duplicates from start, end)
153 find minimum in rotated sorted array. (std bs, start <= end)
154 find minimum in rotated sorted array ii. (std bs, start <= end)
50 pow x n (n = 0, n < 0, n % 2)
69 sqrtx (std bs)
29 divide two integers (how to calculate, sign, overflow)

09.21
94 bt inorder (recursive and iter + stack, morris)
144 binary_tree_preorder_traversal.py  (recur, iter + stack, morris)
145 bt postorder (recursive, iterative two stack and one stack)
100 same tree (basic recur)
101 symmetric tree (basic recur)
102 bt level order (iter queue, recursive)
103 bt zigzag level order (iter queue)
104 maximum depth of bt (basic recur)
107 level order ii (level order, reverse)
110 balanced bst (basic recur, need to calculate height)
111_minimum_depth_of_binary_tree.py (basic recur)
112_path_sum.py (basic recur)

09.22
113 path sum ii (dfs)

09.23
95 unique binary search trees ii.py (dfs)
96 unique_binary_search_trees.py (dfs)
98 validate binary search tree (recursive, passing leftMax and rightMin for helper)
99 recover binary search tree (recursive, iter Morris)

09.24
105 bs from pre and in (recur, MLE error)
106 bs from post and in (similar to #105)
108 sorted array to b-bst (similar to 105)
114 flatten bst to linked list (iter and recur (preorder)
116 populating next right pointers. (Iter Top down. From cur connect next level)
117 populating ii. (Iter top down. Need a start pointer to record last node to connect)
129 sum root to left numbers. (DFS template)
124 binary tree maximum path sum (recusrive, maxRtl function)
120 triangle (DP, Right to left, res update)

09.25
62 unique path (DP, or math)
63 unique path ii (DP, 2D matrix)
64 minimum path sum (DP)
70 climbing stairs (DP, fibonacci)
55 jump game (1 loop, O(1) space solution)
45 jump game ii (Use nextS, nextE, curS, curE to track)

09.26
53_maximum_subarray.py

09.29
44_wildcard_matching.py
10_regular_expression matching. (Similar to wildcard. DP)
72 Edit Distance (2D string DP. if word1[i] == word2[j]

09.30
87 scramble string. (Recursion)
91 decoded ways. (DP, lots of corner cases)
97 interleaving string (2d DP)

10.1
115 distinct sequences

10.8
67 add binary (math)
66 plus binary (math)
118 pascals triangle (dp)
119 pascals triangle ii (dp)
136 single number (math)
141 linked list cycle (list)
38 count and say (simple string)

10.10
84 largestrecetangle in histogram (84 and 85 are similar)
85 Maximal Recentangle
131 palindrome partitioning (dfs)
132 palindrome partitioning ii(dp, i, j two pointers. check update at the same time)
139 word break. (forward dp)
140 word break ii. (backward dp. + dfs)
127 word ladder (bfs, replace one char and check if it is in dict))

10.26

10.29
43 multiply strings.
48 rotate image.    (Flip up down, then flip diagnoal. Watch out the range)

10.30
49 anagrams.    (Use another dict and list to record, traverse the list to get the result)
54 spiral matrix. (Use lvl. Watch out case [1,2,3] and [[1],[2],[3]])
59 spiral matrix ii. (Same template as spiral matrix)
51 n queens.    (DFS)
52 n queens ii.     (Same template as n queens, DFS)

10.31
60 permutation sequence.    (Use math to calculate. Loop each, remove num)
71 simplify path.   (Split then deque)
73 set matrix zeroes.   (o(1) space. Use row0 and col0. Then use 1st row and col to store other cells states)

11.03
75 sort colors.     (3 pointers, move cur only nums[cur] is 0 or 1)
79 word search.     (DFS. Find candidates. Mark board)
80 remove dup from array (Traverse list + del nums[i])
83 remove dup from sorted list  (No dummy needed)
82 remove dup from sorted list ii (Use dummy. while cur, cur.next and cur.next.next))

11.04
86 parition list    (LL. DummyNode. Find "end" and "curEnd". Use "isEnd" to know when to stop.
89 gray code    (simple math)
93 restore ip addresses. (DFS, Exclude "0X", "0XX" cases)
206 reverse linked list (Reverse template. while then: 1. cur.next, 2. then.next = pre.next, 3.pre.next = then, 4. then = cur.next)
92 reverse linked list ii (Reverse template with m, n)

11.05
109 convert sorted list to binary tree. (Simmilar to 107. Recursive Find MID)
61 rotate list. (1. k % length first. 2. Find pivot and then attach. 3.if k == 0, return the same)

11.10 (all easies)
344 reverse string. (two pointers. s -> list -> ''.join)
292 nim game. (n % 4)
371 sum  (bit trick)
258 Add digits (Math hack. Digital Roots)
389 find the difference ( two sum similar.)
283 move zeroes (medium. modify nums directly)
404 sum of left leaves (bfs deque)
349 intersection of two arrays (easy)
237 delete node in LL
171 excel sheet column number (

11.11
37 sudoku solver (DFS. getNext(), getCandidates(), lt_i = i // 3 * 3, board is list not string)
41 first missing positive (Swap to correct position. 1. n+1. 2. )

11.12
42 trapping water. (1 loop. L-R scan. Two pointers. Update l_max, r_max and res)
56 merge intervals. (1. Sort by start. 2. Update res's end if needed)
57 insert intervals. (1. Insert the new Interval first. Then use LC56 idea)
76 minimum window substring (Substring template)
65 valid number (4 steps. )
68 text justification (3 steps.)
128 longest consecutive sequence (Hashmap + update boundary)

11.13 
130 surrounded regions (2Dmatrix. BFS boundaries first)
134 gas station (Greedy puzzle. One loop)
135 candy (Puzzle. L-R scan)
138 copy list with random pointer (Graph Copy. 1. Create node and mapping. 2. Copy pointers)
142 linked list cycle ii (Same as cycle 1. Once slow == fast, put fast to head.)
143 reorder list. (3 steps. 1. Find median. 2. Reverse 2nd list. 3. Break p1,p2 and reconstruct)
147 insertion sort list. (Create in another list)
150 evaluate reverse polish notation. (Use stack)
149 max points on a line. (2D Math. 2 Steps, 4 Cases. (Same point. Vertical, Hor, Other)
