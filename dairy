Goal:
10 medium or easy everyday

before:
39 combination sum (sorted; Pass nums[i:]; Append line when sum == target)
40 combination sum ii (similar to combination sum ii; Pass nums[i+1]; Append when sum == target; if nums[i] == nums[i-1] continue)
46 permutation  (if not nums append; nums[:i] + nums[i+1:]
47 permutations ii  (similar to permutation; if nums[i] == nums[i-1] continue)
77 combinations (append res.size == n; Pass nums[i+1:])
78 subsets  (sorted; nums[i+1:])
90 subsets ii   (subsets; if nums[i] == nums[i-1] continue)
216 combination sum iii (similar to combination sum ii; Pass nums[i+1]; Append when sum == target; if nums[i] == nums[i-1] continue)

09.18
35 search insert position

09.20
34 search for a range (std bs)
74 search in a 2d matrix (standard template, v_mid = matrix[mid // n][mid % n]
162 find peak element (std bs)
240 search in a 2d matrix ii (not bs. Search from top right)
167 two sums ii sorted (non-std bs, start < end)
33 search in a rotated array
81 search in a rotated array ii (Remove duplicates from start, end)
153 find minimum in rotated sorted array. (std bs, start <= end)
154 find minimum in rotated sorted array ii. (std bs, start <= end)
50 pow x n (n = 0, n < 0, n % 2)
69 sqrtx (std bs)
29 divide two integers (how to calculate, sign, overflow)

09.21
94 bt inorder (recursive and iter + stack, morris)
144 binary_tree_preorder_traversal.py  (recur, iter + stack, morris)
145 bt postorder (recursive, iterative two stack and one stack)
100 same tree (basic recur)
101 symmetric tree (basic recur)
102 bt level order (iter queue, recursive)
103 bt zigzag level order (iter queue)
104 maximum depth of bt (basic recur)
107 level order ii (level order, reverse)
110 balanced bst (basic recur, need to calculate height)
111_minimum_depth_of_binary_tree.py (basic recur)
112_path_sum.py (basic recur)

09.22
113 path sum ii (dfs)

09.23
95 unique binary search trees ii.py (dfs)
96 unique_binary_search_trees.py (dfs)
98 validate binary search tree (recursive, passing leftMax and rightMin for helper)
99 recover binary search tree (recursive, iter Morris)

09.24
105 bs from pre and in (recur, MLE error)
106 bs from post and in (similar to #105)
108 sorted array to b-bst (similar to 105)
114 flatten bst to linked list (iter and recur (preorder)


