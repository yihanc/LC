1_two_sum.py
2_add_two_numbers.py
3_longest_substring_without_repeating_characters.py
4_median_of_two_sorted_arrays.py    # hard. hl = m+n+1 // 2,
5_longest_palindromic_substring.py  # Just loop through and expand from each center.
6_zigzag_conversion.py              # Use an array. if i == n, i = n - 2, if i == -1, i == 1
7_reverse_integer.py                # Overflow
8_string_to_integer_atoi.py         # Remove leading space. if + or -. Read numbers and add to sum. Ignore after.
9_palindrome_number.py              # while new_int >= x. Lots of corner cases
10_regular_expression_matching.py   # 2D DP. s[i] == t[j] or t[j] == '.', A[][] = 
11_container_with_most_water.py     # L-R scan.
12_integer_to_roman.py              # Dic for everything.
13_roman_to_integer.py              
14_longest_common_prefix.py         # Scan
15_3sum.py                          # sort. handle duplicate. i,j,k
16_3sum_closet.py                   # Same sort. handle duplicate. i,j,k. update min
17_letter_combinations_of_a_phone_number.py # DFS + dic. or Dic loop + RES
18_4sum.py                          # Same as 3sum
19_remove_nth_node_from_end_of_list.py  # slow. fast. get pre
20_valid_parenttheses.py            # Stack. if (, push. if ) and not stack[-1] false
21_merge_two_sorted_lists.py        # dummy while l1 or l2
22_generate_parentheses.py          # DFS. one int for available "(" and one for ")"
23_merge_k_sorted_lists.py          # Merge sort.
24_swap_nodes_in_pairs.py           # Reverse template
25_reverse_nodes_in_k_group.py      # Check and reverse template.
26_remove_duplicates_from_sorted_array.py
27_remove_element.py
28_implement_strstr.py              # Scan all substring
29_divide_two_integers.py           # 15 // 3, 6 -> 12 -> 24, res += 1 << count
30_substring_with_concatenation_of_all_words.py     # l, r window. count dic
31_next_permutation.py
32_longest_valid_parentheses.py
33_search_in_rotated_sorted_array.py
34_search_for_a_range.py            # Binary Search left edge and right edge
35_search_insert_position.py
36_valid_sudoku.py
37_sudoku_solver.py
38_count_and_say.py
39_combination_sum.py
40_combination_sum_ii.py
41_first_missing_positive.py
42_trapping_rain_water.py
43_multiply_strings.py
44_wildcard_matching.py         # Same template as 10_, 
45_jump_game_ii.py
46_permutation.py
47_permutations_ii.py
48_rotate_image.py
49_group_anagrams.py
50_powx_n.py
51_n_queens.py
52_n_queens_ii.py
53_maximum_subarray.py
54_spiral_matrix.py
55_jump_game.py
56_merge_intervals.py
57_insert_interval.py
58_length_of_last_word.py
59_spiral_matrix_ii.py
60_permutation_sequence.py
61_rotate_list.py
62_unique_paths.py
63_unique_paths_ii.py
64_minimum_path_sum.py
65_valid_number.py
66_plus_one.py
67_add_binary.py
68_text_justification.py
69_sqrtx.py
70_climbing_stairs.py
71_simplify_path.py
72_edit_distance.py
73_set_matrix_zeroes.py
74_search_a_2d_matrix.py
75_sort_colors.py
76_minimum_window_substring.py
77_combinations.py
78_subsets.py
79_word_search.py
80_remove_duplicates_from_sorted_array_ii.py
81_search_in_rotated_sorted_array_ii.py
82_remove_duplicates_from_sorted_list_ii.py
83_remove_duplicates_from_sorted_list.py
84_largest_rectangle_in_histogram.py
85_maximal_rectangle.py
86_partition_list.py
87_scramble_string.py
88_merge_sorted_array.py
89_gray_code.py
90_subsets_ii.py
91_decoded_ways.py
92_reverse_linked_list_ii.py
93_restore_ip_addresses.py
94_binary_tree_inorder_traversal.py
95_unique_binary_search_trees_ii.py
96_unique_binary_search_trees.py
97_interleaving_string.py       # DP solution. Backtracking is TLE
98_validate_binary_search_tree.py
99_recover_binary_search_tree.py
100_same_tree.py
101_symmetric_tree.py
102_binary_tree_level_order_traversal.py
103_binary_tree_zigzag_level_order_traversal.py
104_maximum_depth_of_binary_tree.py
105_construct_binary_tree_from_preorder_and_inorder_traversal.py
106_construct_binary_tree_from_inorder_and_postorder_traversal.py
107_binary_tree_level_order_traversal_ii.py
108_convert_sorted_array_to_binary_search_tree.py
109_convert_sorted_list_to_binary_search_tree.py
110_balanced_binary_tree.py
111_minimum_depth_of_binary_tree.py
112_path_sum.py
113_path_sum_ii.py
114_flatten_binary_tree_to_linked_list.py
115_distinct_subsequences.py
116_populating_next_right_pointers_in_each_node.py
117_populating_next_right_pointers_in_each_node_ii.py
118_pascals_triangle.py
119_pascals_triangle_ii.py
120_triangle.py
121_best_time_to_buy_and_sell_stock.py
122_best_time_to_buy_and_sell_stock_ii.py
123_best_time_to_buy_and_sell_stock_iii.py
124_binary_tree_maximum_path_sum.py
125_valid_palindrome.py
126_word_ladder_ii.py
127_word_ladder.py                          # BFS return
128_longest_consecutive_sequence.py
129_sum_root_to_leaf_numbers.py
130_surrounded_regions.py                   # BFS + isVis[][] + deque. Scan all bounaries. For each DFS
131_palindrome_partitioning.py
132_palindrome_partitioning_ii.py
133_clone_graph.py                      
134_gas_station.py                          # One loop. Record sum_gas, sum_cost and tank. if sum < sum_cost return -1. if tank < 0, start = i+1
135_candy.py                                # L R scan.
136_single_number.py                        # ^=
137_single_number_ii.py                     # Sum bits for each position. Then mod 3. Method two: ones ^= A[i], twos = twos | ( A[i]
138_copy_list_with_random_pointer.py        # 1. Create all nodes and dic[old] = new. 2. Trav again to copy pointers
139_word_break.py                           # DP from front
140_word_break_ii.py                        # DP + DFS. from front. Need to check
141_linked_list_cycle.py                    # slow, fast
142_linked_list_cycle_ii.py                 # slow fast and 
143_reorder_list.py                         # 1. Find Mid. 2. Reverse second. 3. build
144_binary_tree_preorder_traversal.py
145_binary_tree_postorder_traversal.py
147_insertion_sort_list.py                  # Create new list. while cur: while cur.val < p2.next.val 
148_sort_list.py
149_max_points_on_a_line.py                 # For each pair. Calculate slope and b. Hash into dic and count. 4 cases. same point, Vertical, Horizontal, Others
150_evaluate_reverse_polish_notation.py     # Stack. If "+-*/" pop two, else push
151_reverse_words_in_a_string.py            # Split
152_maximum_product_subarray.py
153_find_minimum_in_rotated_sorted_array.py #If one element, return
154_find_minimum_in_rotated_sorted_array_ii.py
155_min_stack.py
162_find_peak_element.py
167_two_sum_ii_sorted.py
168_excel_sheet_column_title.py
171_excel_sheet_column_number.py
174_dungeon_game.py
206_reverse_linked_list.py
216_combination_sum_iii.py
226_invert_binary_tree.py
237_delete_node_in_a_linked_list.py
240_search_a_2d_matrix_ii.py
258_add_digits.py
283_move_zeroes.py
283_move_zeros.py
292_nim_game.py
344_reverse_string.py
345_reverse_vowels_of_a_string.py
349_intersection_of_two_arrays.py
371_sum_of_two_integrers.py
383_ransom_note.py
389_find_the_difference.py
404_sum_of_left_leaves.py
448_find_all_numbers_disappered_in_an_array_G.py
